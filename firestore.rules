rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /reviewables/{guid} {
      allow read: if true;
      allow update: if
        // Must contain exactly the desired properties, and they must have
        // exactly the desired types. Unfortunately it seems that it always adds
        // all of them, so I'll need to check that most of them don't change.
        
        // The ones we actually care about here, and may allow to be updated.
        request.resource.data.lastAddedReviewID is string
        && request.resource.data.numberOfReviews is number
        && request.resource.data.starRatingTotal is number

        // The ones we don't want to change must be equal to what is already in
        // there.
        && request.resource.data.guid == resource.data.guid
        && request.resource.data.title == resource.data.title
        && request.resource.data.dateOfPublication
          == resource.data.dateOfPublication
        && request.resource.data.description == resource.data.description
        && request.resource.data.url == resource.data.url
        && request.resource.data.imageURL == resource.data.imageURL

        // Ensure no additional fields are being added.
        && request.resource.data.size() == 9

        // The added review must be created in a transaction with this change.
        && !exists(/databases/$(database)/documents/reviews/$(
          request.resource.data.lastAddedReviewID
        ))
        && existsAfter(/databases/$(database)/documents/reviews/$(
          request.resource.data.lastAddedReviewID
        ))

        // The number of reviews must be incremented by 1.
        && request.resource.data.numberOfReviews
          == resource.data.numberOfReviews + 1

        // The new total star rating must be the sum of the old one and the new
        // rating.
        && request.resource.data.starRatingTotal == (
          getAfter(/databases/$(database)/documents/reviews/$(
          request.resource.data.lastAddedReviewID
          )).data.starRating
          + resource.data.starRatingTotal
        )
    }

    match /reviews/{id} {
      allow read: if true;
      allow create: if
      	// Must contain exactly the desired properties, and they must have
        // exactly the desired types.
      	request.resource.data.name is string
        && request.resource.data.starRating is number
        && request.resource.data.reviewText is string
        && request.resource.data.dateOfCreation is timestamp
        && request.resource.data.reviewableGUID is string
        && request.resource.data.size() == 5

        // name must be between 1 and 100 characters, inclusive.
        && request.resource.data.name.size() > 0
        && request.resource.data.name.size() <= 100

        // starRating must be a valid rating that is it must be an
        // increment of 0.5 between 0.5 and 5, inclusive.
        && request.resource.data.starRating in [
          0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5
        ]

        // reviewText must be between 1 and 5000 characters, inclusive.
        && request.resource.data.reviewText.size() > 0
        && request.resource.data.reviewText.size() <= 5000

        // dateOfCreation must be the same day as the day the request was
        // received. Not prefect but hopefully this will do.
        && request.resource.data.dateOfCreation.date() == request.time.date()

        // reviewableGUID must be refer to an existing reviewable.
        && exists(/databases/$(database)/documents/reviewables/$(
          request.resource.data.reviewableGUID
        ));
    }
  }
}